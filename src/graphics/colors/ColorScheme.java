package graphics.colors;

import java.util.TreeMap;
import java.util.stream.IntStream;

/**
 *
 * @author David
 */
public enum ColorScheme {

    BLACK_AND_WHITE_SQRT,
    FIRE
    
    
    ;
    private static final TreeMap<Integer, Integer> colors = new TreeMap<>();

    /**
     *
     * @param histogram a histogram of the escape values generated by the
     * mandelbrot calculator
     * @param scheme the scheme
     * @return An TreeMap of colors generated with the selected scheme in sRGB,
     * where the key of the escape value maps to the appropriate color space;
     *
     * Does nothing on invalid scheme code
     */
    public static TreeMap<Integer, Integer> generate(Histogram histogram, ColorScheme scheme) {
        long start = System.currentTimeMillis();
        colors.clear();
        switch (scheme) {
            case BLACK_AND_WHITE_SQRT:
                bw(histogram);
                break;
            case FIRE:
                fire(histogram);
                break;
        }
        long stop = System.currentTimeMillis();
        System.out.println("Color generation took " + (stop - start) + " ms");
        return colors;
    }

    public static void bw(Histogram histogram) {
        int[][] data = histogram.toIntArray();
        //System.out.println(data[1].length);
        double len = data[1].length;
        int[] values = IntStream.range(0, data[1].length)
                .map(x -> rgbaToColorCode(255, 255, 255, (int) (255 * Math.sqrt(x / len)))).toArray();
        //System.out.println(Arrays.toString(values));
        for (int i = 0; i < values.length; i++) {
            colors.put(data[0][i], values[i]);
        }
        //System.out.println(colors);
    }
    public static void fire(Histogram histogram){
        int[][] data = histogram.toIntArray();
        double len = data[1].length;
        int[] values = IntStream.range(0, data[1].length).map(x -> rgbaToColorCode(
                15 + (int)(240 * Math.sqrt(Math.sqrt(x / len))), 
                (int)(210 * x / len * x / len), 
                0,  
                255)).toArray(); // figure out this
        
        for (int i = 0; i < values.length; i++) {
            colors.put(data[0][i], values[i]);
        }
    }
    private static int rgbaToColorCode(int r, int g, int b, int a) {
        return ((a & 0xFF) << 24)
                | ((r & 0xFF) << 16)
                | ((g & 0xFF) << 8)
                | ((b & 0xFF));
    }

}
